(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{582:function(s,t,a){"use strict";a.r(t);var e=a(17),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"es5-和-es6-继承的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5-和-es6-继承的区别"}},[s._v("#")]),s._v(" ES5 和 ES6 继承的区别")]),s._v(" "),a("h2",{attrs:{id:"es5-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5-继承"}},[s._v("#")]),s._v(" ES5 继承")]),s._v(" "),a("p",[s._v("ES5 继承通过原型链(构造函数 + "),a("strong",[s._v("proto")]),s._v(")指向实现继承；内部实现机制上，实质是先创造子类的实例对象 this，然后再将父类的方法添加到这个 this 上")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 父类：function SuperType；子类：function SubType；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SubType 继承 SuperType")]),s._v("\n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据上一节原型链讲到的知识点：实例化对象的__proto__等于构造函数的prototype")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("h2",{attrs:{id:"es6-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-继承"}},[s._v("#")]),s._v(" ES6 继承")]),s._v(" "),a("p",[s._v("ES6 继承 通过 class 的 extends + super 实现继承；子类没有自己的 this 对象，因此必须在 constructor 中通过 super 继承父类的 this 对象，而后对此 this 对象进行添加方法和属性；内部实现机制上，实质是先创造父类的实例对象 this(需要提前调用 super 方法)，然后再用子类的构造函数修改 this 指针")]),s._v(" "),a("h2",{attrs:{id:"es5-继承-vs-es6-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5-继承-vs-es6-继承"}},[s._v("#")]),s._v(" ES5 继承 VS ES6 继承")]),s._v(" "),a("ul",[a("li",[s._v("ES6 继承，类内部定义的方法都是不可枚举的")]),s._v(" "),a("li",[s._v("ES6 继承，类不存在变量提升")]),s._v(" "),a("li",[s._v("内部实现机制不一样")]),s._v(" "),a("li",[s._v("ES6 继承，类相当于实例的原型，所有在类中定义的方法都会被实例继承；如果在一个方法前加上 static 关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就成为静态方法")])])])}),[],!1,null,null,null);t.default=r.exports}}]);