(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{587:function(t,a,s){"use strict";s.r(a);var e=s(17),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("p",[t._v("事件循环（Event Loop）是JavaScript中处理异步操作的机制。它负责管理和调度代码的执行顺序，以确保异步任务能够按照正确的顺序执行。")]),t._v(" "),s("h2",{attrs:{id:"面试中如何回答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试中如何回答"}},[t._v("#")]),t._v(" 面试中如何回答")]),t._v(" "),s("p",[t._v("事件循环是一种用于管理异步操作的执行顺序机制，通常用于前端开发中的 JavaScript 以及后端开发中的 Node.js 等环境。它的核心思想是通过一个循环来不断地检查任务队列(或者称为消息队列)，并且在任务队列中有任务时执行它们。这样可以确保异步操作能够按照预期的顺序执行，并且不会阻塞主线程或主线程的执行。")]),t._v(" "),s("h2",{attrs:{id:"浏览器环境下js引擎的事件循环原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器环境下js引擎的事件循环原理"}},[t._v("#")]),t._v(" 浏览器环境下JS引擎的事件循环原理")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("执行同步代码：JavaScript引擎首先执行当前的同步代码块，这是代码的初始执行阶段。")])]),t._v(" "),s("li",[s("p",[t._v("处理任务队列：在执行同步代码的过程中，如果遇到异步任务，例如定时器、网络请求或事件监听器，这些异步任务会被放置到任务队列中等待执行。")])]),t._v(" "),s("li",[s("p",[t._v("检查任务队列：当同步代码执行完毕或处于空闲状态时，事件循环会检查任务队列是否有待处理的任务。")])]),t._v(" "),s("li",[s("p",[t._v("任务执行：如果任务队列中有待处理的任务，事件循环会将任务取出并执行。这包括从宏任务队列中取出一个宏任务执行，或者从微任务队列中取出一个或多个微任务执行。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("宏任务（macrotask）：代表一组相对较大的任务，例如setTimeout、setInterval、I/O操作等。宏任务会在每次事件循环的顶部执行。")])]),t._v(" "),s("li",[s("p",[t._v("微任务（microtask）：代表一组相对较小的任务，例如Promise回调、MutationObserver回调等。微任务会在每个宏任务执行完毕后立即执行，即在当前任务之间。")])])])]),t._v(" "),s("li",[s("p",[t._v("更新UI渲染：在执行任务期间，如果有需要更新UI的操作，例如DOM修改或重绘，会被推迟到任务执行完毕后执行，以确保用户界面的响应性能。")])]),t._v(" "),s("li",[s("p",[t._v("重复循环：执行完当前任务后，事件循环会回到第三步，继续检查任务队列中是否有待处理的任务。这个过程会不断重复，形成循环，直到任务队列为空。")])])]),t._v(" "),s("h3",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),s("p",[t._v("当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。")]),t._v(" "),s("h3",{attrs:{id:"事件队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件队列"}},[t._v("#")]),t._v(" 事件队列")]),t._v(" "),s("p",[t._v("当一个异步代码（如发送ajax请求数据）执行后会如何呢？js的另一大特点是非阻塞，实现这一点的关键在于事件队列（Task Queue）。事件队列是用来存异步任务的。")]),t._v(" "),s("h3",{attrs:{id:"宏任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),s("ul",[s("li",[t._v("setTimeout")]),t._v(" "),s("li",[t._v("setInterval")]),t._v(" "),s("li",[t._v("script(整体代码)")]),t._v(" "),s("li",[t._v("I/O")]),t._v(" "),s("li",[t._v("UI交互")])]),t._v(" "),s("h3",{attrs:{id:"微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),s("ul",[s("li",[t._v("Promise")]),t._v(" "),s("li",[t._v("MutationObserver")])]),t._v(" "),s("h2",{attrs:{id:"node环境下的事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node环境下的事件循环"}},[t._v("#")]),t._v(" node环境下的事件循环")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("┌───────────────────────┐\n┌─>│        timers         │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     I/O callbacks     │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     idle, prepare     │\n│  └──────────┬────────────┘      ┌───────────────┐\n│  ┌──────────┴────────────┐      │   incoming:   │\n│  │         poll          │<──connections───     │\n│  └──────────┬────────────┘      │   data, etc.  │\n│  ┌──────────┴────────────┐      └───────────────┘\n│  │        check          │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n└──┤    close callbacks    │\n   └───────────────────────┘\n")])])]),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33058983",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解JS中的EventLoop事件循环机制"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);