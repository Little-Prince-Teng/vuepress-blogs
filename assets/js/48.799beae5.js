(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{616:function(t,e,r){"use strict";r.r(e);var s=r(17),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"promise"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),r("h2",{attrs:{id:"promise-如何解决回调地狱问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-如何解决回调地狱问题"}},[t._v("#")]),t._v(" promise 如何解决回调地狱问题")]),t._v(" "),r("p",[t._v("通过then链式调用将异步操作的结果按照顺序执行，在上一个promise的then方法中返回下一个promise对象")]),t._v(" "),r("h2",{attrs:{id:"promise-中-then-的第二个参数和-catch-有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-中-then-的第二个参数和-catch-有什么区别"}},[t._v("#")]),t._v(" Promise 中 then 的第二个参数和 catch 有什么区别")]),t._v(" "),r("ul",[r("li",[t._v("reject 是用来抛出异常的，catch 是用来处理异常的")]),t._v(" "),r("li",[t._v("reject 是 Promise 的方法(Promise.reject())，而 then 和 catch 是 Promise 实例的方法(Promise.prototype.catch())")]),t._v(" "),r("li",[t._v("如果 then 的第一个函数抛出异常，后面的 catch 可以捕获到，而 then 的第二个函数捕获不到")])])])}),[],!1,null,null,null);e.default=a.exports}}]);