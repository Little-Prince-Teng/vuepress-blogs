(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{593:function(v,_,t){"use strict";t.r(_);var a=t(17),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"微前端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微前端"}},[v._v("#")]),v._v(" 微前端")]),v._v(" "),t("h2",{attrs:{id:"什么是微前端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是微前端"}},[v._v("#")]),v._v(" 什么是微前端")]),v._v(" "),t("p",[v._v("微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略")]),v._v(" "),t("h2",{attrs:{id:"微前端能够解决什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微前端能够解决什么问题"}},[v._v("#")]),v._v(" 微前端能够解决什么问题")]),v._v(" "),t("p",[v._v("将巨大的单体前端系统拆分成多个独立的小型系统，最后集成为一个系统的架构思路，分而治之，让系统更加容易维护、更易扩展，实施微前端是一个先拆分，后合并的过程")]),v._v(" "),t("h2",{attrs:{id:"微前端架构具体的核心价值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微前端架构具体的核心价值"}},[v._v("#")]),v._v(" 微前端架构具体的核心价值")]),v._v(" "),t("ul",[t("li",[v._v("技术栈无关")])]),v._v(" "),t("p",[v._v("主框架不限制接入应用的技术栈，微应用具备完全自主权")]),v._v(" "),t("ul",[t("li",[v._v("独立开发、独立部署")])]),v._v(" "),t("p",[v._v("微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新")]),v._v(" "),t("ul",[t("li",[v._v("增量升级")])]),v._v(" "),t("p",[v._v("在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略")]),v._v(" "),t("ul",[t("li",[v._v("独立运行时")])]),v._v(" "),t("p",[v._v("每个微应用之间状态隔离，运行时状态不共享")]),v._v(" "),t("h2",{attrs:{id:"为什么需要微前端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要微前端"}},[v._v("#")]),v._v(" 为什么需要微前端")]),v._v(" "),t("p",[v._v("巨石单体系统随着业务的增加，变得越来越臃肿，多个团队一起开发，沟通成功高，编译、部署、测试、维护困难，微前端可解决这些问题。")]),v._v(" "),t("ul",[t("li",[v._v("应用自治：各个应用相互独立，规模更小，更容易扩展、测试、构建、维护、排错、升级依赖等；")]),v._v(" "),t("li",[v._v("团队自治：应用独立后，团队也会独立，减少很多人在一个巨石应用中同时开发，相互影响，提高开发效率；")]),v._v(" "),t("li",[v._v("技术无关：各个应用可选择不同的框架开发，尽量保持统一，否则应用之间交互会可能遇到麻烦，也不利于组件复用，比如无法共享组件级别的代码；")]),v._v(" "),t("li",[v._v("尝试新技术：应用拆分后，很容易在系统里尝试新技术。")]),v._v(" "),t("li",[v._v("老系统增量重构。")])]),v._v(" "),t("h2",{attrs:{id:"微前端存在的一些缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微前端存在的一些缺点"}},[v._v("#")]),v._v(" 微前端存在的一些缺点")]),v._v(" "),t("ul",[t("li",[v._v("代码规范统一比较困难（人员多、项目多），容易克服")]),v._v(" "),t("li",[v._v("开发时可能需要同时运行多个项目，容易克服")]),v._v(" "),t("li",[v._v("集成测试比较困难")]),v._v(" "),t("li",[v._v("UI、交互等容易不统一，容易克服")])]),v._v(" "),t("h2",{attrs:{id:"如何集成-聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-聚合"}},[v._v("#")]),v._v(" 如何集成--聚合")]),v._v(" "),t("p",[v._v("运行时构建: 主应用在浏览器加载后，再去获取微应用代码；优点是可以独立部署，主应用能决定使用哪个微应用的版本，灵活，性能好")]),v._v(" "),t("p",[v._v("集成时应该考虑的问题:")]),v._v(" "),t("ul",[t("li",[v._v("避免样式冲突")]),v._v(" "),t("li",[v._v("应用之间通信简单")]),v._v(" "),t("li",[v._v("不同应用之间导航丝滑")]),v._v(" "),t("li",[v._v("能集成特定版本")]),v._v(" "),t("li",[v._v("版本控制不相互干扰")])]),v._v(" "),t("h2",{attrs:{id:"常见微前端实施方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见微前端实施方案"}},[v._v("#")]),v._v(" 常见微前端实施方案")]),v._v(" "),t("p",[v._v("框架：MicroApp、single-spa、qiankun")]),v._v(" "),t("p",[v._v("无框架的解决方案:")]),v._v(" "),t("ul",[t("li",[v._v("web components 不推荐，无法提供模块化功能，项目越大，越容易失控，web component 本质是封装自定义的 html 标签, 会很快回到 jQuery 时代")]),v._v(" "),t("li",[v._v("iframe")]),v._v(" "),t("li",[v._v("webpack5 module fedetation webpack5 的一个新特性，可实现跨应用共享代码")])])])}),[],!1,null,null,null);_.default=s.exports}}]);